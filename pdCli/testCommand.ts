import { pd } from "../deps.ts";
import { pdBuild } from "../pdBuild.ts";
import { cliHelpTemplate } from "../stringTemplates.ts";
import { PD_DIR } from "./helpers.ts";
import type { pdCliInput } from "./mod.ts";

const helpText = cliHelpTemplate({
  title: "Test",
  command: "pd test",
  sections: [
    "Run tests for all scripts generated by pd",
    `Options:
    -j, --json    Output the build information as JSON.
    -p, --pretty  Pretty print the JSON output.
    -d, --debug   Display debug information.
    -h, --help    Display this message.`,
  ],
});

const args = [
  "test",
  "-A",
  "--unstable-kv",
  `--config=${PD_DIR}/deno.json`,
  "--no-check",
];

export async function testCommand(input: pdCliInput) {
  if (pd.$p.get(input, "/flags/help") || pd.$p.get(input, "/flags/h")) {
    console.log(helpText);
  } else {
    await pdBuild(input);

    if (input.flags["--"].length > 0) {
      args.push("--");
      args.push(...input.flags["--"]);
    }
    const test = new Deno.Command(Deno.execPath(), {
      args,
      stdout: "piped",
      stderr: "piped",
    });

    const decoder = new TextDecoder();
    const output = await test.output();
    const error = decoder.decode(output.stderr);
    const out = decoder.decode(output.stdout);
    console.log(out);
    if (error) {
      console.error(error);
    }
  }

  return input;
}

export function updateTestCommand(input: pdCliInput) {
  input.flags["--"].push("--update");
  return testCommand(input);
}
